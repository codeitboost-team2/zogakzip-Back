datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Group {
  id           Int          @id @default(autoincrement())
  name         String
  password     String
  imageUrl     String?
  isPublic     Boolean
  introduction String?
  likeCount    Int          @default(0)
  postCount    Int          @default(0)
  createdAt    DateTime     @default(now())
  badgeCount   Int          @default(0)

  badges       GroupBadge[]
  posts        Post[]       
}

model Badge {
  id       Int          @id @default(autoincrement())
  name     String
  imageUrl String?

  groups   GroupBadge[]  
}

model GroupBadge {
  id       Int     @id @default(autoincrement())
  groupId  Int
  badgeId  Int
  group    Group   @relation(fields: [groupId], references: [id])
  badge    Badge   @relation(fields: [badgeId], references: [id])

  @@unique([groupId, badgeId]) 
}

model Image {
  id        Int      @id @default(autoincrement())
  filename  String
  url       String
  createdAt DateTime @default(now())
}

// 게시글 
model Post {
  id           Int       @id @default(autoincrement())
  postPassword String
  groupId      Int
  nickname     String
  title        String
  content      String
  imageUrl     String?
  location     String?
  moment       DateTime
  isPublic     Boolean
  likeCount    Int       @default(0)
  commentCount Int       @default(0)
  createdAt    DateTime  @default(now())

  group        Group     @relation(fields: [groupId], references: [id])
  
  tags         PostTag[]
  comments     Comment[] // 댓글 관계 추가
}

// 태그 
model Tag {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  posts    PostTag[]
}

// 게시글-태그 연결 
model PostTag {
  id       Int     @id @default(autoincrement())
  postId   Int
  tagId    Int
  post     Post    @relation(fields: [postId], references: [id])
  tag      Tag     @relation(fields: [tagId], references: [id])

  @@unique([postId, tagId])
}

// 댓글 
model Comment {
  id              Int      @id @default(autoincrement())
  postId          Int
  nickname        String
  content         String
  commentPassword String
  createdAt       DateTime @default(now())

  post            Post     @relation(fields: [postId], references: [id])

  @@index([postId])
}
